{"ast":null,"code":"import { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, EDIT_STREAM, DELETE_STREAM } from \"./types\";\nimport streams from \"../apis/streams\";\nimport history from \"../history\";\nexport const signIn = (userId, userName) => {\n  return {\n    type: SIGN_IN,\n    payload: userId,\n    name: userName\n  };\n};\nexport const signOut = userId => {\n  return {\n    type: SIGN_OUT,\n    payload: userId\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post(\"/streams\", { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(\"/streams/\" + id);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(\"/streams/\" + id, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(\"streams/\" + id);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push(\"/\");\n};","map":{"version":3,"sources":["D:/react/streams/client/src/actions/index.js"],"names":["SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","EDIT_STREAM","DELETE_STREAM","streams","history","signIn","userId","userName","type","payload","name","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"AAAA,SACEA,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,WANF,EAOEC,aAPF,QAQO,SARP;AASA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAEZ,OADD;AAELa,IAAAA,OAAO,EAAEH,MAFJ;AAGLI,IAAAA,IAAI,EAAEH;AAHD,GAAP;AAKD,CANM;AAQP,OAAO,MAAMI,OAAO,GAAIL,MAAD,IAAY;AACjC,SAAO;AACLE,IAAAA,IAAI,EAAEX,QADD;AAELY,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMM,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACxE,QAAM;AAAET,IAAAA;AAAF,MAAaS,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMd,OAAO,CAACe,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBP,IAAAA;AAAjB,GAAzB,CAAvB;AACAQ,EAAAA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAEV,aAAR;AAAuBW,IAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACAf,EAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD,CALM;AAOP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOP,QAAP,IAAoB;AACpD,QAAMG,QAAQ,GAAG,MAAMd,OAAO,CAACmB,GAAR,CAAY,UAAZ,CAAvB;AACAR,EAAAA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAET,aAAR;AAAuBU,IAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMI,WAAW,GAAIC,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACrD,QAAMG,QAAQ,GAAG,MAAMd,OAAO,CAACmB,GAAR,CAAY,cAAcE,EAA1B,CAAvB;AACAV,EAAAA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAER,YAAR;AAAsBS,IAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMM,UAAU,GAAG,CAACD,EAAD,EAAKX,UAAL,KAAoB,MAAOC,QAAP,IAAoB;AAChE,QAAMG,QAAQ,GAAG,MAAMd,OAAO,CAACuB,KAAR,CAAc,cAAcF,EAA5B,EAAgCX,UAAhC,CAAvB;AACAC,EAAAA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAEP,WAAR;AAAqBQ,IAAAA,OAAO,EAAEQ,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACAf,EAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD,CAJM;AAMP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACtD,QAAMX,OAAO,CAACyB,MAAR,CAAe,aAAaJ,EAA5B,CAAN;AACAV,EAAAA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEe;AAAhC,GAAD,CAAR;AACApB,EAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD,CAJM","sourcesContent":["import {\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  CREATE_STREAM,\r\n  FETCH_STREAMS,\r\n  FETCH_STREAM,\r\n  EDIT_STREAM,\r\n  DELETE_STREAM,\r\n} from \"./types\";\r\nimport streams from \"../apis/streams\";\r\nimport history from \"../history\";\r\n\r\nexport const signIn = (userId, userName) => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: userId,\r\n    name: userName,\r\n  };\r\n};\r\n\r\nexport const signOut = (userId) => {\r\n  return {\r\n    type: SIGN_OUT,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const createStream = (formValues) => async (dispatch, getState) => {\r\n  const { userId } = getState().auth;\r\n  const response = await streams.post(\"/streams\", { ...formValues, userId });\r\n  dispatch({ type: CREATE_STREAM, payload: response.data });\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const fetchStreams = () => async (dispatch) => {\r\n  const response = await streams.get(\"/streams\");\r\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\nexport const fetchStream = (id) => async (dispatch) => {\r\n  const response = await streams.get(\"/streams/\" + id);\r\n  dispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\nexport const editStream = (id, formValues) => async (dispatch) => {\r\n  const response = await streams.patch(\"/streams/\" + id, formValues);\r\n  dispatch({ type: EDIT_STREAM, payload: response.data });\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const deleteStream = (id) => async (dispatch) => {\r\n  await streams.delete(\"streams/\" + id);\r\n  dispatch({ type: DELETE_STREAM, payload: id });\r\n  history.push(\"/\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}