{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\nimport flv from \"flv.js\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n    console.log(this.props);\n  }\n\n  render() {\n    if (!this.props.stream) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 36\n      }\n    }, \"Loading...\");\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: \"100%\"\n      },\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, \" \", title, \" \"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["D:/react/streams/client/src/components/streams/StreamShow.js"],"names":["React","connect","fetchStream","flv","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","match","params","id","console","log","render","stream","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,KAAL,CAAWL,WAAX,CAAuB,KAAKK,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAjB;AACD;;AACDS,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKT,KAAL,CAAWU,MAAhB,EAAwB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACxB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyB,KAAKZ,KAAL,CAAWU,MAA1C;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,GAAG,EAAE,KAAKT,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,EAAE,IAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAMF,KAAN,MAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHF,CADF;AAOD;;AArBsC;;AAwBzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEN,IAAAA,MAAM,EAAEK,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACZ,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACD,CAFD;;AAGA,eAAeZ,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAA0CE,UAA1C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStream } from \"../../actions\";\r\nimport flv from \"flv.js\";\r\n\r\nclass StreamShow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.videoRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchStream(this.props.match.params.id);\r\n    console.log(this.props);\r\n  }\r\n  render() {\r\n    if (!this.props.stream) return <div>Loading...</div>;\r\n    const { title, description } = this.props.stream;\r\n\r\n    return (\r\n      <div>\r\n        <video ref={this.videoRef} style={{ width: \"100%\" }} controls={true} />\r\n        <h1> {title} </h1>\r\n        <h5>{description}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { stream: state.streams[ownProps.match.params.id] };\r\n};\r\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\r\n"]},"metadata":{},"sourceType":"module"}